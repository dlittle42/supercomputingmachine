{
  "name": "connect-modrewrite",
  "main": "./src/modrewrite.js",
  "version": "0.3.16",
  "description": "connect-modrewrite adds modrewrite functionality to connect/express server",
  "author": {
    "name": "Tingan Ho",
    "email": "tingan87@gmail.com"
  },
  "contributors": [
    {
      "name": "Tingan Ho",
      "email": "tingan87@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com:tinganho/connect-modrewrite.git"
  },
  "bugs": {
    "url": "https://github.com/tinganho/connect-modrewrite/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tinganho/connect-modrewrite/blob/master/LICENSE-MIT"
    }
  ],
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.0",
    "grunt": "~0.4.0",
    "grunt-contrib-connect": "~0.1.0",
    "grunt-bump": "0.0.1",
    "chai": "~1.4.2",
    "mocha": "~1.8.1"
  },
  "scripts": {
    "test": "./bin/test"
  },
  "keywords": [
    "gruntplugin",
    "grunt-contrib",
    "grunt-contrib-connect",
    "modrewrite"
  ],
  "readme": "connect-modrewrite [![Build Status](https://travis-ci.org/tinganho/connect-modrewrite.png)](https://travis-ci.org/tinganho/connect-modrewrite)\n========================\n`connect-modrewrite` adds modrewrite functionality to connect/express server.\n\n# Getting started\nInstall `connect-modrewrite` with:\n```bash\nnpm install connect-modrewrite --save\n```\n\nRequire it:\n\n```javascript\nvar modRewrite = require('connect-modrewrite');\n```\nAn example configuration:\n\n```javascript\nvar app = connect() // express() for express server\n// app.configure(function() { for express server\n  .use(modRewrite([\n      '^/test$ /index.html',\n      '^/test/\\\\d*$ /index.html [L]',\n      '^/test/\\\\d*/\\\\d*$ /flag.html [L]'\n    ], [\n      /\\/test/ //Notice that it is not a string\n  ]))\n  .use(connect.static(options.base))\n  .listen(3000)\n// }) for express server\n```\n\n# Configurations\nIn the example above, `modRewrite` take as an `Array` of rewrite rules as an argument.\nEach rewrite rule is a string with the syntax:\n`MATCHING_PATHS REPLACE_WITH [FLAGS]`.\n`MATCHING_PATHS` should be defined using a regex string. And that string is passed as an argument to the javascript `RegExp Object` for matching of paths. `REPLACE_WITH` is the replacement string for matching paths. Flags is optional and is defined using hard brackets. We currently only support the last flag `[L]`. Please give suggestions to more flags that makes sense for `connect-modrewrite`.\n\n## NEW IN VERSION 0.3\nConnect-modrewrite normalized all URL:s that where assets before. Now in version 0.3 you need pass it as the second argument. The second argument needs to be a JS RegExp object. If a match occur a normalize urls process will begin. Normalizing assets can be convenient e.g. if you are serving JS/CSS files under the URL, http://localhost/blog/2. The browser will request the asset with e.g. `http://localhost/blog/style.css` instead of `http://localhost/style.css`. If you pass in `/\\/blog/` as the second argument in `modRewrite` above, it will normalize all assets urls that begins with `/blog`\n\n## Inverted URL matching\nBegin with `!` for inverted URL matching.\n\n## Use defined params\nJust wrap the defined param with `()` and access it with `$n`. This is defined in JS `.replace` in https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/String/replace\n\n`^/blog/(.*) /$1`\n\n## Flags\n### Last [L]\nIf a path matches, any subsequent rewrite rules will be disregarded.\n\n## Authors\nTingan Ho, tingan87[at]gmail.com\n\n## License\nCopyright (c) 2012 Tingan Ho\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/tinganho/connect-modrewrite",
  "_id": "connect-modrewrite@0.3.16",
  "_from": "connect-modrewrite@~0.3.16"
}
